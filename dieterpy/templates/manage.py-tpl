import argparse
import sys
import os

PROJECT_DIR_ABS = os.path.dirname(os.path.abspath(__file__))


def parser():
    parser = argparse.ArgumentParser(description='dieterpy command line')
    # add positional argument create_project and run
    parser.add_argument('command', help='This argument must be "run", or "gdxconvert"', type=str)
    parser.add_argument('-m','--method', help='Required argument for gdxconvert', type=str)
    parser.add_argument('-c','--cores', help='Provides to gdxconvert the option of running parallel \
                                    with a limited number of cores. Default: 0, no cores limit', type=str)

    args = parser.parse_args()
    return args

def main():
    try:
        from dieterpy.config import settings
        settings.PROJECT_DIR_ABS = PROJECT_DIR_ABS
        settings.update_changes()

    except ImportError as exc:
        raise ImportError("Couldn't import manage.py. Are you sure it's in current working dir?") from exc
    arg_option = ['run', 'gdxconvert']
    args = parser()
    if not args.command in arg_option:
        raise Exception(f'First positional argument must be in {arg_option}')
    if args.command == 'run':
        try:
            from dieterpy.scripts import runopt
        except ImportError as exc:
            raise ImportError(
                "Couldn't import dieterpy. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        print('Running DIETER model\n ')
        return runopt.main()
    elif args.command == 'gdxconvert':
        if args.method:
            try:
                from dieterpy.scripts.output_data import GDXpostprocessing
            except ImportError:
                raise
            if args.method == 'global':
                paths_list = os.path.join(settings.RESULTS_DIR_ABS,'*','*_config.yml')
                print(paths_list)
            elif args.method == 'custom':
                paths_list = []
                print('Please, provide ID you want to include')
                while True:
                    print("ID: ", end='')
                    add_id = input()
                    print(f'Is this ID correct: {add_id}? (Y/N):', end='')
                    confirm = input()
                    if confirm.lower() == 'y':
                        print(f'{add_id} added...')
                        paths_list.append(os.path.join(settings.RESULTS_DIR_ABS, add_id,add_id + '_config.yml'))
                    else:
                        print(f'Your answer is "{confirm}". Try with a new ID...')
                        continue
                    print(f'Do you want to add a new ID? (Y/N):', end='')
                    stop = input()
                    if stop.lower() == 'y':
                        pass
                    else:
                        break
                print('Ids provided correspond to the following files:')
                for path in paths_list:
                    print(f' {path}')
            else:
                raise Exception(f'--method not recognized. It can be "global" or "custom"')
            if args.cores:
                core = int(args.cores)
            else:
                core = 0
            print('\nStarting with gdx conversion...')
            return GDXpostprocessing(method=args.method, input=paths_list, cores_data=core)
        else:
            raise Exception(f'--method is a required argument. It can be "global" or "custom"')

if __name__ == '__main__':
    main()
